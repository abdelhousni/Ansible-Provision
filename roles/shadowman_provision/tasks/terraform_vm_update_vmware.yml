---
- name: Set facts if Windows chosen
  ansible.builtin.set_fact:
    vm_tag: Windows
    terraform_network: "LAN_01"
  when: operating_system == "Win2016"
  delegate_to: localhost

- name: Sync with Gitrepo
  ansible.builtin.git:
    repo: 'git@github.com:shadowman-lab/Ansible-Terraform.git'
    dest: /tmp/home/terraform
    version: master
    accept_newhostkey: true
    key_file: /certs/id_ed25519
  delegate_to: localhost

# Remove if desired to manually update terraform file
- name: Update terraform main file
  ansible.builtin.template:
    src: templates/terraformvmware.tf.j2
    dest: /tmp/terraform/vmware/main.tf
    owner: root
    group: root
    mode: '0644'
  when: terraformmain == "ansible"
  delegate_to: localhost

- name: copy terraform main file for gitops
  ansible.builtin.copy:
    src: templates/main.tf
    dest: /tmp/terraform/vmware/main.tf
    owner: root
    group: root
    mode: '0644'
  when: terraformmain == "gitops"
  delegate_to: localhost

- name: Update State of VM to {{ terraform_state }} from template using Terraform
  community.general.terraform:
    project_path: "/tmp/terraform/vmware/main.tf"
    state: "{{ terraform_state }}"
    force_init: true
  register: terraformvms
  delegate_to: localhost

- name: Display Current Terraform VMs
  ansible.builtin.debug:
    msg: "{{ terraformvms | json_query('outputs.*.value') }}"
  delegate_to: localhost

- name: Set stat for active vms if using gitops/manual update
  ansible.builtin.set_stats:
    data:
      vm_name: "{{ terraformvms | json_query('outputs.*.value') | join(',') }}"
  delegate_to: localhost
  when: terraformmain == "gitops"

- name: Set fact for vmnames for tagging
  ansible.builtin.set_fact:
    vm_names: "{{ terraformvms | json_query('outputs.*.value') }}"
  delegate_to: localhost
  when: terraformmain == "gitops"

- name: VMWare Tags block
  block:
    - name: Assign Tags
      community.vmware.vmware_tag_manager:
        tag_names:
          - "{{ tag }}"
        object_name: "{{ item }}"
        object_type: VirtualMachine
        state: add
        validate_certs: false
      delegate_to: localhost
      loop: "{{ vm_names }}"

    - name: Loop to create group for linux hosts
      ansible.builtin.include_tasks: add_host_loop_vmware_terraform.yml
      loop: "{{ vm_names }}"
      when: operating_system is match("RHEL.*")

  when: terraform_state == "present"
