---
- name: Change facts if running Windows
  ansible.builtin.set_fact:
    source_vm_id: "Win2016_ShadowMan"
    operating_system_tag: "Windows"
  when: operating_system is match("Win.*")

- name: Change facts if running RHEL8
  ansible.builtin.set_fact:
    source_vm_id: "RHEL8_ShadowMan"
  when: operating_system == "RHEL8"

- name: Change facts if running RHEL8 Edge
  ansible.builtin.set_fact:
    source_vm_id: "RHEL8EDGE_ShadowMan"
  when: operating_system == "RHEL8Edge"

- name: Create and run Linux VM
  community.vmware.vmware_guest:
    cluster: '{{ cluster_id }}'
    datastore: '{{ datastore_id }}'
    folder: '{{ folder_id }}'
    datacenter: "Shadowman"
    name: "{{ item }}"
    state: "{{ state }}"
    template: "{{ source_vm_id }}"
    wait_for_ip_address: true
    validate_certs: false
  loop: "{{ vm_names }}"
  when: operating_system is match("RHEL.*")

- name: Create and run Windows VM
  community.vmware.vmware_guest:
    cluster: '{{ cluster_id }}'
    datastore: '{{ datastore_id }}'
    folder: '{{ folder_id }}'
    datacenter: "Shadowman"
    name: "{{ item }}"
    state: "{{ state }}"
    template: "{{ source_vm_id }}"
    validate_certs: false
    networks:
      - name: LAN_01
        start_connected: true
        connected: true
    customization:
      domain: ad.shadowman.dev
      autologon: true
      autologoncount: 1
      hostname: "{{ item.split('.')[0] }}"
      productid: "{{ productid }}"
      password: "{{ windowspassword }}"
      runonce:
        - powershell.exe -ExecutionPolicy ByPass -File C:\Windows\Temp\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert
  loop: "{{ vm_names }}"
  when: operating_system is match("Win.*")

- name: Assign Tags
  community.vmware.vmware_tag_manager:
    tag_names:
      - tag: "{{ operating_system_tag }}"
        category: operating_system
      - tag: "{{ env | default('dev') }}"
        category: environment
      - tag: "{{ owner | default('shadowman') }}"
        category: owner
    object_name: "{{ item }}"
    object_type: VirtualMachine
    state: add
    validate_certs: false
  loop: "{{ vm_names }}"
